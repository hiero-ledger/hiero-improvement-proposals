name: Update Draft HIPs Data

on:
  schedule:
    - cron: "0 */6 * * *" # Runs every 6 hours
  workflow_dispatch: # Allows manual triggering

jobs:
  update-draft-hips:
    if: github.ref == 'refs/heads/main' # Only run on main branch
    runs-on: hiero-improvement-proposals-linux-medium
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Import GPG Key
        id: gpg_importer
        uses: step-security/ghaction-import-gpg@6c8fe4d0126a59d57c21f87c9ae5dd3451fa3cca # v6.1.0
        with:
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_user_signingkey: true
          gpg_private_key: ${{ secrets.GPG_KEY_CONTENTS }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: "20"

      - name: Create Script
        run: |
          mkdir -p _data
          cat << 'EOF' > fetch-draft-hips.js
          const https = require('https');
          const fs = require('fs');

          async function makeGraphQLRequest(query, token) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.github.com',
                path: '/graphql',
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                  'User-Agent': 'Node.js'
                }
              };

              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', chunk => { data += chunk; });
                res.on('end', () => {
                  try {
                    const parsedData = JSON.parse(data);
                    if (res.statusCode >= 400) {
                      console.error('API Error:', parsedData);
                      reject(new Error(`API returned status ${res.statusCode}`));
                    } else {
                      resolve(parsedData);
                    }
                  } catch (e) {
                    reject(e);
                  }
                });
              });

              req.on('error', reject);
              req.write(JSON.stringify({ query }));
              req.end();
            });
          }

          async function getAllPRs() {
            // Query only for open PRs
            const query = `
              query { 
                repository(name: "hiero-improvement-proposals", owner: "hiero-ledger") {
                  pullRequests(first: 100, states: [OPEN], orderBy: {field: CREATED_AT, direction: DESC}) {
                    nodes {
                      title
                      number
                      url
                      headRefOid
                      files(first: 100) {
                        edges {
                          node {
                            path
                            additions
                            deletions
                          }
                        }
                      }
                      author {
                        login
                      }
                      isDraft
                      createdAt
                      baseRefName
                    }
                  }
                }
              }
            `;

            try {
              const result = await makeGraphQLRequest(query, process.env.GITHUB_TOKEN);
              
              if (result.errors) {
                console.error('GraphQL errors:', result.errors);
                process.exit(1);
              }

              // Filter to only include PRs that appear to be new HIPs (not modifications to existing ones)
              return filterNewHIPPRs(result.data.repository.pullRequests.nodes);
            } catch (error) {
              console.error('Error fetching PRs:', error);
              throw error;
            }
          }

          function filterNewHIPPRs(prs) {
            // Filter for PRs that contain new HIP files (not updates to existing ones)
            const newHIPPRs = [];
            const seenPRs = new Set();

            for (const pr of prs) {
              // Skip if we've already processed this PR
              if (seenPRs.has(pr.number)) {
                continue;
              }
              
              // Check each file in the PR
              const files = pr.files.edges.map(edge => edge.node);
              
              // Only consider PRs that contain markdown files in the HIPs directory
              const hipFiles = files.filter(file => {
                const path = file.path;
                return path.endsWith('.md') && 
                       path.includes('/hip-') && 
                       !path.includes('/template');
              });

              // Check if this PR is introducing a new HIP rather than modifying existing ones
              // A good indicator is if the file has high additions and low/no deletions
              const isNewHIP = hipFiles.some(file => 
                file.additions > 20 && file.deletions < 10
              );

              if (isNewHIP) {
                newHIPPRs.push(pr);
                seenPRs.add(pr.number);
              }
            }

            return newHIPPRs;
          }

          // Run the main function
          getAllPRs().then(prs => {
            // Clear existing file before writing
            if (fs.existsSync('_data/draft_hips.json')) {
              fs.unlinkSync('_data/draft_hips.json');
            }
            
            // Write the new data
            fs.writeFileSync('_data/draft_hips.json', JSON.stringify(prs, null, 2));
            
            console.log(`Successfully processed ${prs.length} new HIP PRs`);
          }).catch(error => {
            console.error('Failed to fetch PRs:', error);
            process.exit(1);
          });
          EOF

      - name: Run Script
        run: node fetch-draft-hips.js
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Commit and Push Changes
        env:
          GITHUB_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
          GITHUB_USER_NAME: ${{ secrets.GIT_USER_NAME }}
        run: |
          git config --local user.email "$GITHUB_USER_EMAIL"
          git config --local user.name "$GITHUB_USER_NAME"
          git add _data/draft_hips.json
          git diff --staged --quiet || (git commit -s -S -m "Update draft HIPs data [skip ci]" && git push origin main)