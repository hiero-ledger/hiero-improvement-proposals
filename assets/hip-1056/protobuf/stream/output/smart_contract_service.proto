/**
 * # Smart Contract Service
 * Block stream messages that report the results of transactions handled
 * by the `smart contract` service.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream.output;

// SPDX-License-Identifier: Apache-2.0
option java_package = "com.hedera.hapi.block.stream.output.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block.stream.output">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "services/contract_types.proto";

// <<<START new types from services/contract_types.proto>>>
/**
 * Context of an internal call in an EVM transaction that is not otherwise externalized.<br/>
 */
message InternalCallContext {
    /**
     * The gas available for the call.<br/>
     */
    uint64 gas = 1;

    /**
     * The value sent with the call.<br/>
     */
    uint64 value = 2;

    /**
     * The call data for the call.<br/>
     */
    bytes call_data = 3;
}

/**
 * Results of executing a EVM transaction.<br/>
 */
message EvmTransactionResult {
    /**
     * The Hedera id of the caller.<br/>
     */
    AccountID sender_id = 1;

    /**
     * The Hedera id of the contract receiving the call.<br/>
     */
    ContractID contract_id = 2;

    /**
     * Result data from the function call.
     */
    bytes result_data = 3;

    /**
     * Any error message produced by the contract call. Max size of 100 bytes.
     * <p>
     * This SHALL be unset if the contract call succeeded.
     */
    string error_message = 4;

    /**
     * EVM gas used.
     */
    uint64 gas_used = 5;

    /**
     * If not already externalized in a transaction body, the context of the
     * internal call producing this result.
     */
    InternalCallContext internal_call_context = 6;
}
// <<<END new types from services/contract_types.proto>>>

/**
 * Block Stream data for a `contractCallMethod` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message CallContractOutput {
    // Preview block streams used this field for sidecars
    reserved 1;

    /**
     * An EVM transaction result. Contains just the information not already
     * externalized in the matching transaction body.
     */
    proto.EvmTransactionResult evm_transaction_result = 2;
}

/**
 * Block Stream data for a `createContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message CreateContractOutput {
    // Preview block streams used this field for sidecars
    reserved 1;

    /**
     * An EVM transaction result. Contains just the information not already
     * externalized in the matching transaction body.
     */
    proto.EvmTransactionResult evm_transaction_result = 2;
}

// no evm exec, only modified entity
/**
 * Block Stream data for a `updateContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message UpdateContractOutput {}

// no evm exec, only modified entity
/**
 * Block Stream data for a `deleteContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message DeleteContractOutput {}

/**
 * Block Stream data for a contract `systemUndelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message SystemUnDeleteContractOutput {}

/**
 * Block Stream data for a contract `systemDelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message SystemDeleteContractOutput {}

/**
 * Block Stream data for a `callEthereum` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message EthereumOutput {
   // Preview block streams used these fields for sidecars and verbose
   // contract function results
   reserved 2,3,4;

    /**
     * If the associated Ethereum transaction required hydrating its
     * call data from a file, the Keccak256 hash of the transaction.
     * <p>
     * If the Ethereum transaction was inline, this field SHALL NOT be set.
     */
    bytes ethereum_hash = 1;

    oneof txn_result {
        /**
         * An EVM transaction result for an Ethereum transaction executed as a
         * call. Contains just the information not already externalized in the
         * matching transaction body.
         */
        proto.EvmTransactionResult evm_call_transaction_result = 5;

        /**
         * An EVM transaction result for an Ethereum transaction executed as a
         * create. Contains just the information not already externalized in the
         * matching transaction body.
         */
        proto.EvmTransactionResult evm_create_transaction_result = 6;
    }
}
