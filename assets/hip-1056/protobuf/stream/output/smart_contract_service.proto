/**
 * #  Service
 * Block stream messages that report the results of transactions handled
 * by the `smart contract` service.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream.output;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.block.stream.output.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block.stream.output">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "contract_call_local.proto";

/**
 * Block Stream data for a `contractCallMethod` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractCallOutput {
     /**
      * A receipt for an Ethereum Transaction execution
      */
     EVMTransactionReceipt evm_transaction_receipt = 1;
}

/**
 * Block Stream data for a `createContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractCreateOutput {
     /**
      * A receipt for an Ethereum Transaction execution
      */
     EVMTransactionReceipt evm_transaction_receipt = 1;
}

// no evm exec, only modified entity
/**
 * Block Stream data for a `deleteContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractDeleteOutput {}

/**
 * Block Stream data for a contract `systemUndelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractSystemUnDeleteOutput {}

/**
 * Block Stream data for a contract `systemDelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractSystemDeleteOutput {}

// no evm exec, only modified entity
/**
 * Block Stream data for a `updateContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
 message ContractUpdateOutput {}
 
/**
 * Block Stream data for a `callEthereum` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message EthereumOutput {
     /**
      * A receipt for an Ethereum Transaction execution
      */
     EVMTransactionReceipt evm_transaction_receipt = 1;
}

/**
 * EVM transaction execution log storage details
 * Details maps to the log object in eth_getTransactionReceipt response without repeating info already available in the input transaction
 */
message EVMTransactionLog {
     /**
      * The address of the contract emitting the log
      * Q: Should we change this to ContractID as a space saver and parsers have to go pick up the 20 bytesaddress?
      */
     string address = 1;

     /**
      * The sequence index of the log event in this block
      */
     int32 log_index = 2;

     /**
      * The Log data
      */
     bytes data = 3;

     /**
      * The logc topics
      */
     repeated bytes topics = 4;
}

/**
 * EVM tranactin execution output details
 * Details maps to the log eth_getTransactionReceipt response without repeating info already available in the input transaction
 */
message EVMTransactionReceipt {
     /**
      * A bloom filter produced by this contract call.<br/>
      * Ethereum uses this bloom filter to search for call results in the
      * Ethereum block history. High false positive rates make the bloom
      * filters quite limited value.
      * Q: should htis be moved to Trace? If this was filtered out would it 
      * break users of eth_getLogs
      */
     bytes bloom = 1;  

     /**
      * Result data from the function call.
      * <p>
      * This SHALL be encoded in RLP bytecode format.
      */
     bytes contractCallResult = 2;

     /**
      * Any error message produced by the contract call.
      * <p>
      * This SHALL be unset if the contract call succeeded.
      */
     string errorMessage = 3;

     /**
      * A quantity of "gas" used.<br/>
      * This represents the resource units expended to execute this
      * contract call, and correlates to transaction costs.
      */
     uint64 gas_used = 4;

     /**
      * Any Log events produced by this contract call.
      */
     repeated EVMTransactionLog logs = 5;
}

/**
 * The slots read during the contract execution. These slots may or may not have been overwritten.
 * The associated writes and contract will be found in the state changes MapUpdateChange KVs
 * Q: Should we add the ContractId in here for simplicity?
 */
message SlotRead {
    /**
     * The number of the contract whose storage this slot belongs to.
     */
    ContractID contractID = 1;

     /**
      * The identifer to use to link this read storage value to it's key and potential written value
      */
     oneof slot_key_link {
          /**
           * The contract storage slot counter used to correlate slots across BlockItems for a given contract in a transactions.
           */
          int32 index = 1;

          /**
           * The key of this contratc storage slot, may be left-padded with zeros to form a 256-bit word.
           */
          bytes key = 2;
     }     
	
     /**
      * The storage value in this slot, may be left-padded with zeros to form a 256-bit word.
      */
     bytes read_value = 3;
}

/**
 * EVM tranaction execution trace details
 * Details maps to the variable needed for debugging executions
 */
message EVMTraceData {
    /**
     * The inter contract interaction details. This represents the internal EVM message frames.
     */
    repeated ContractAction contract_actions = 1;

    /**
     * An ethereum transaction hash value.
     * <p>
     * This SHALL be a keccak256 hash of the ethereumData that represents the RLP encoded transaction.
     * Q: should we remove this as parsers can calcualte by encoding the RLPTx in the input block item
     */
    bytes ethereum_hash = 2;    
 
    /**
     * Contract slot values that were read during the execution of the EVM transaction. Assocaited written values will be in state changes
     */
    repeated SlotRead read_values = 3;
 
    /**
     * Contract runtime bytecode. Corresponding init code can be found in transaction input
     * Q: Is this needed? If initicode is in the input then this is only need if runtime is not what is stored in state.
     */
    bytes runtime_bytecode = 4;
}
